services:
  # This section defines the MySQL database
  db:
    image: mysql:latest
    # Environment variables to setup mysql
    # Using secrets to store passwords
    # File paths for secret .txt files (Not pushed to github must be manually created)
    # All_project_code/db_password.txt
    # All_project_code/db_root_password.txt
    environment:
      MYSQL_DATABASE: adl_db
      MYSQL_USER: adl
      MYSQL_PASSWORD: qwer1234
      MYSQL_ROOT_PASSWORD: 1234qwer
    # secrets:
    #   - db_root_password
    #   - db_password
    expose:
      - "3306"                                  
    volumes:
      - adl-db:/var/lib/mysql  # Creates a docker managed volume to persist your data
      - ./init_data:/docker-entrypoint-initdb.d # Binds ./init_data to docker-entrypoint-initdb.d
                                                #   MySQL image will run create_tables.sql on startup

  # ------------------------------------------- # This section defines our Node.js image.
  web:
    image: node:12
    user: "node"                                # Use a non-root user node
    working_dir: /home/node/app                 # with home directory /home/node/app
    environment:
      - NODE_ENV=production                   # << Use this when deploying your application,
                                              #   currently we have it off so that changes to
                                              #   *.ejs are visible without restarting docker-compose.
    depends_on:
      - db                                      # This indicates that docker should start the database first,
                                                # otherwise our website would have no data.
    ports:
        - "3000:3000"                           # Here we do need to publish the port for viewing on the host.
    volumes:
      - ./:/home/node/app                       # Binds the current directory (containing our source code) into the image,
                                                #  so that changes made to the source code on the host
                                                #  are reflected witin the container.
    command: "npm start"                        # This is a semi-hack for this lab that runs both npm install
                                                # and node index.js (see the prestart command in package.json)

# secrets:
#    db_password:
#      file: db_password.txt
#    db_root_password:
#      file: db_root_password.txt

# This defines our volume(s), which will perist throughout startups.
# If you want to get rid of a hanging volume, e.g. to test your database init,
# run `docker-compose rm -v`. Note that this will remove ALL of your data, so
# be extra sure you've made a stable backup somewhere.
volumes:
  adl-db: {}
